// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int            @id @unique @default(autoincrement())
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  userName     String         @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  imageUrl     String?
  post      Post[]
  votes     Votes[]
}

// model Post {
//   id                       Int    @id @unique @default(autoincrement())
//   cost                     String
//   description              String @db.VarChar(10000)
//   implementationDifficulty String
//   city                     String
//   country                  String
//   state                     String
//   zipCode                  String
//   livingSituation          String
//   title                    String
//   goodFor                  String

//   userName  String //since we are faking it I wont have any real relations 
//   // user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   votes     Votes[]
//   recommendations Recommendations[]
//   upvotes   Int     @default(0)
//   downvotes Int     @default(0)

//   // @@index([userId])
// }

model Post {
  id                       Int    @id @unique @default(autoincrement())
  cost                     String
  description              String @db.VarChar(10000)
  implementationDifficulty String
  city                     String
  livingSituation          String
  title                    String

  userId                   Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Votes[]
  recommendations Recommendations[]
  upvotes   Int     @default(0)
  downvotes Int     @default(0)

  @@index([userId])
}

model Votes {
  id       Int    @id @unique @default(autoincrement())
  postId   Int
  type     String //could be upvote or downvote
  userId   Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}
model Recommendations{
  id       Int    @id @unique @default(autoincrement())
  recommendation String
  postId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}